/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package to_postgress

import java.util.Properties

import org.apache.spark.sql.SparkSession


object App {
  def main(args: Array[String]): Unit = {

    val session = SparkSession.builder
      .appName("to_postgress")
      .enableHiveSupport()
      .getOrCreate()

    session.sparkContext.setLogLevel("Warn")

    val conn_str = args(0)
    val driver = "org.postgresql.Driver"

    val connectionProperties = new Properties()
    connectionProperties.setProperty("driver", driver)
    connectionProperties.setProperty("user", args(1))
    connectionProperties.setProperty("password", args(2))

    val ContractTypeDict      = session.sql("select * from dl_dict_contract_type")
    val GenderDict            = session.sql("select * from dl_dict_gender")
    val AccompliceDict        = session.sql("select * from dl_dict_accomplice")
    val IncomeTypeDict        = session.sql("select * from dl_dict_income_type")
    val EducationTypeDict     = session.sql("select * from dl_dict_education_type")
    val FamilyStatusDict      = session.sql("select * from dl_dict_family_status")
    val HousingTypeDict       = session.sql("select * from dl_dict_housing_type")
    val OccupationTypeDict    = session.sql("select * from dl_dict_occupation_type")
    val DayOfWeekAppliedDict  = session.sql("select * from dl_dict_day_of_week_applied")

    System.out.println(conn_str);
    System.out.println(args(1));
    System.out.println(args(2));


    ContractTypeDict.write.mode("overwrite").option("createTableColumnTypes", "value VARCHAR (100), key INTEGER").jdbc(conn_str,"dict_contract_type",connectionProperties)
    GenderDict.write.mode("overwrite").option("createTableColumnTypes", "value VARCHAR (100), key INTEGER").jdbc(conn_str,"dict_gender",connectionProperties)
    AccompliceDict.write.mode("overwrite").option("createTableColumnTypes", "value VARCHAR (100), key INTEGER").jdbc(conn_str,"dict_accomplice",connectionProperties)
    IncomeTypeDict.write.mode("overwrite").option("createTableColumnTypes", "value VARCHAR (100), key INTEGER").jdbc(conn_str,"dict_income_type",connectionProperties)
    EducationTypeDict.write.mode("overwrite").option("createTableColumnTypes", "value VARCHAR (100), key INTEGER").jdbc(conn_str,"dict_education_type",connectionProperties)
    FamilyStatusDict.write.mode("overwrite").option("createTableColumnTypes", "value VARCHAR (100), key INTEGER").jdbc(conn_str,"dict_family_status",connectionProperties)
    HousingTypeDict.write.mode("overwrite").option("createTableColumnTypes", "value VARCHAR (100), key INTEGER").jdbc(conn_str,"dict_housing_type",connectionProperties)
    OccupationTypeDict.write.mode("overwrite").option("createTableColumnTypes", "value VARCHAR (100), key INTEGER").jdbc(conn_str,"dict_occupation_type",connectionProperties)
    DayOfWeekAppliedDict.write.mode("overwrite").option("createTableColumnTypes", "value VARCHAR (100), key INTEGER").jdbc(conn_str,"dict_day_of_week_applied",connectionProperties)

  }
}

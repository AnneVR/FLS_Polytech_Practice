/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package to_dl_mart

import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.types.IntegerType
import org.apache.spark.sql.{Row, SparkSession}

import scala.collection.mutable.ArrayBuffer

object App {
  def main(args: Array[String]) = {

    val session = SparkSession.builder
      .appName("to_dl_raw")
      .enableHiveSupport()
      .getOrCreate()

    session.sparkContext.setLogLevel("Warn")

    import session.implicits._
    import org.apache.spark.sql.functions._

    val raw = session.sql("select * from dl_raw_filtered")


    val headers = raw.columns.toBuffer
    var dictHeaders = ArrayBuffer("NAME_CONTRACT_TYPE","CODE_GENDER","NAME_TYPE_SUITE",
                                    "NAME_INCOME_TYPE","NAME_EDUCATION_TYPE","NAME_FAMILY_STATUS",
                                    "NAME_HOUSING_TYPE","OCCUPATION_TYPE","WEEKDAY_APPR_PROCESS_START")
    val nonDictHeaders = headers --= dictHeaders

    val data = raw
      .na.fill("none",dictHeaders)
      .na.fill("0",nonDictHeaders)
      .na.fill(0,nonDictHeaders)

    val ContractTypeRaw               = data.select("NAME_CONTRACT_TYPE")
    val GenderRaw                     = data.select("CODE_GENDER")
    val AccompliceRaw                 = data.select("NAME_TYPE_SUITE")
    val IncomeTypeRaw                 = data.select("NAME_INCOME_TYPE")
    val EducationTypeRaw              = data.select("NAME_EDUCATION_TYPE")
    val FamilyStatusRaw               = data.select("NAME_FAMILY_STATUS")
    val HousingTypeRaw                = data.select("NAME_HOUSING_TYPE")
    val OccupationTypeRaw             = data.select("OCCUPATION_TYPE")

    val ContractTypeDistinct       = ContractTypeRaw.distinct()
    val GenderDistinct             = GenderRaw.distinct()
    val AccompliceDistinct         = AccompliceRaw.distinct()
    val IncomeTypeDistinct         = IncomeTypeRaw.distinct()
    val EducationTypeDistinct      = EducationTypeRaw.distinct()
    val FamilyStatusDistinct       = FamilyStatusRaw.distinct()
    val HousingTypeDistinct        = HousingTypeRaw.distinct()
    val OccupationTypeDistinct     = OccupationTypeRaw.distinct()

    val DayOfWeekAppliedDistinct   = Seq(("MONDAY", 1), ("TUESDAY", 2), ("WEDNESDAY", 3), ("THURSDAY", 4), ("FRIDAY", 5), ("SATURDAY", 6), ("SUNDAY", 7))

    val ContractTypeDict          = ContractTypeDistinct.withColumn("NAME_CONTRACT_TYPE_ID",row_number()
      .over(Window.orderBy("NAME_CONTRACT_TYPE")))
    val GenderDict                = GenderDistinct.withColumn("CODE_GENDER_ID",row_number()
      .over(Window.orderBy("CODE_GENDER")))
    val AccompliceDict            = AccompliceDistinct.withColumn("NAME_TYPE_SUITE_ID",row_number()
      .over(Window.orderBy("NAME_TYPE_SUITE")))
    val IncomeTypeDict            = IncomeTypeDistinct.withColumn("NAME_INCOME_TYPE_ID",row_number()
      .over(Window.orderBy("NAME_INCOME_TYPE")))
    val EducationTypeDict         = EducationTypeDistinct.withColumn("NAME_EDUCATION_TYPE_ID",row_number()
      .over(Window.orderBy("NAME_EDUCATION_TYPE")))
    val FamilyStatusDict          = FamilyStatusDistinct.withColumn("NAME_FAMILY_STATUS_ID",row_number()
      .over(Window.orderBy("NAME_FAMILY_STATUS")))
    val HousingTypeDict           = HousingTypeDistinct.withColumn("NAME_HOUSING_TYPE_ID",row_number()
      .over(Window.orderBy("NAME_HOUSING_TYPE")))
    val OccupationTypeDict        = OccupationTypeDistinct.withColumn("OCCUPATION_TYPE_ID",row_number()
      .over(Window.orderBy("OCCUPATION_TYPE")))

    val DayOfWeekAppliedDict = DayOfWeekAppliedDistinct.toDF("WEEKDAY_APPR_PROCESS_START", "WEEKDAY_APPR_PROCESS_START_ID")

    data.show(0)  //?????????????????????

    val DataFiltered = data
      .join(ContractTypeDict, data("NAME_CONTRACT_TYPE") === ContractTypeDict("NAME_CONTRACT_TYPE"), "outer")
      .join(GenderDict, data("CODE_GENDER") === GenderDict("CODE_GENDER"), "outer")
      .join(AccompliceDict, data("NAME_TYPE_SUITE") === AccompliceDict("NAME_TYPE_SUITE"), "outer")
      .join(IncomeTypeDict, data("NAME_INCOME_TYPE") === IncomeTypeDict("NAME_INCOME_TYPE"), "outer")
      .join(EducationTypeDict, data("NAME_EDUCATION_TYPE") === EducationTypeDict("NAME_EDUCATION_TYPE"), "outer")
      .join(FamilyStatusDict, data("NAME_FAMILY_STATUS") === FamilyStatusDict("NAME_FAMILY_STATUS"), "outer")
      .join(HousingTypeDict, data("NAME_HOUSING_TYPE") === HousingTypeDict("NAME_HOUSING_TYPE"), "outer")
      .join(OccupationTypeDict, data("OCCUPATION_TYPE") === OccupationTypeDict("OCCUPATION_TYPE"), "outer")
      .join(DayOfWeekAppliedDict, data("WEEKDAY_APPR_PROCESS_START") === DayOfWeekAppliedDict("WEEKDAY_APPR_PROCESS_START"), "inner")
      .withColumn("FLAG_OWN_CAR_ID", when(col("FLAG_OWN_CAR") === "Y", "1")
        .when(col("FLAG_OWN_CAR") === "N", "0"))
      .withColumn("FLAG_OWN_REALTY_ID", when(col("FLAG_OWN_REALTY") === "Y", "1")
        .when(col("FLAG_OWN_REALTY") === "N", "0"))
      .drop("NAME_CONTRACT_TYPE", "CODE_GENDER", "FLAG_OWN_CAR", "FLAG_OWN_REALTY", "NAME_TYPE_SUITE", "NAME_INCOME_TYPE",
      "NAME_EDUCATION_TYPE", "NAME_FAMILY_STATUS", "NAME_HOUSING_TYPE", "OCCUPATION_TYPE", "WEEKDAY_APPR_PROCESS_START")
      .withColumnRenamed("SK_ID_CURR", "c_id")
      .withColumnRenamed("TARGET","f_target")
      .withColumnRenamed("NAME_CONTRACT_TYPE_ID","c_contract")
      .withColumnRenamed("CODE_GENDER_ID","c_gender")
      .withColumnRenamed("FLAG_OWN_CAR_ID","f_car")
      .withColumnRenamed("FLAG_OWN_REALTY_ID","f_realty")
      .withColumnRenamed("CNT_CHILDREN","a_children")
      .withColumnRenamed("AMT_INCOME_TOTAL","a_income")
      .withColumnRenamed("AMT_CREDIT","a_credit")
      .withColumnRenamed("AMT_ANNUITY","a_annuity")
      .withColumnRenamed("AMT_GOODS_PRICE","a_goods_price")
      .withColumnRenamed("NAME_TYPE_SUITE_ID","c_accomplice")
      .withColumnRenamed("NAME_INCOME_TYPE_ID","c_income")
      .withColumnRenamed("NAME_EDUCATION_TYPE_ID","c_education")
      .withColumnRenamed("NAME_FAMILY_STATUS_ID","c_family")
      .withColumnRenamed("NAME_HOUSING_TYPE_ID","c_housing")
      .withColumnRenamed("REGION_POPULATION_RELATIVE","a_reg")
      .withColumnRenamed("DAYS_BIRTH","d_birth")
      .withColumnRenamed("DAYS_EMPLOYED","d_employed")
      .withColumnRenamed("DAYS_REGISTRATION","d_registration")
      .withColumnRenamed("DAYS_ID_PUBLISH","d_id")
      .withColumnRenamed("OWN_CAR_AGE","d_car")
      .withColumnRenamed("FLAG_MOBIL","f_mobil")
      .withColumnRenamed("FLAG_CONT_MOBILE","f_cont")
      .withColumnRenamed("FLAG_EMAIL","f_email")
      .withColumnRenamed("OCCUPATION_TYPE_ID","c_occup")
      .withColumnRenamed("CNT_FAM_MEMBERS","a_family")
      .withColumnRenamed("REGION_RATING_CLIENT","r_reg")
      .withColumnRenamed("REGION_RATING_CLIENT_W_CITY","r_reg_city")
      .withColumnRenamed("WEEKDAY_APPR_PROCESS_START_ID","s_dow")
      .withColumnRenamed("HOUR_APPR_PROCESS_START","s_hour")
      .withColumnRenamed("REG_REGION_NOT_LIVE_REGION","f_adress_not_match_cont_adress")
      .withColumnRenamed("REG_REGION_NOT_WORK_REGION","f_adress_not_match_work_adress")

    val DataRes = DataFiltered
      .withColumn("c_id", col("c_id").cast(IntegerType))
      .withColumn("f_target", col("f_target").cast(IntegerType))
      .withColumn("a_children", col("a_children").cast(IntegerType))
      .withColumn("d_birth", col("d_birth").cast(IntegerType))
      .withColumn("d_employed", col("d_employed").cast(IntegerType))
      .withColumn("d_registration", col("d_registration").cast(IntegerType))
      .withColumn("d_id", col("d_id").cast(IntegerType))
      .withColumn("d_car", col("d_car").cast(IntegerType))
      .withColumn("f_mobil", col("f_mobil").cast(IntegerType))
      .withColumn("f_cont", col("f_cont").cast(IntegerType))
      .withColumn("f_email", col("f_email").cast(IntegerType))
      .withColumn("a_family", col("a_family").cast(IntegerType))
      .withColumn("r_reg", col("r_reg").cast(IntegerType))
      .withColumn("r_reg_city", col("r_reg_city").cast(IntegerType))
      .withColumn("s_hour", col("s_hour").cast(IntegerType))
      .withColumn("f_adress_not_match_cont_adress", col("f_adress_not_match_cont_adress").cast(IntegerType))
      .withColumn("f_adress_not_match_work_adress", col("f_adress_not_match_work_adress").cast(IntegerType))
      .withColumn("c_contract", col("c_contract").cast(IntegerType))
      .withColumn("c_gender", col("c_gender").cast(IntegerType))
      .withColumn("c_accomplice", col("c_accomplice").cast(IntegerType))
      .withColumn("c_income", col("c_income").cast(IntegerType))
      .withColumn("c_education", col("c_education").cast(IntegerType))
      .withColumn("c_family", col("c_family").cast(IntegerType))
      .withColumn("c_housing", col("c_housing").cast(IntegerType))
      .withColumn("c_accomplice", col("c_accomplice").cast(IntegerType))
      .withColumn("c_occup", col("c_occup").cast(IntegerType))
      .withColumn("s_dow", col("s_dow").cast(IntegerType))
      .withColumn("f_car", col("f_car").cast(IntegerType))
      .withColumn("f_realty", col("f_realty").cast(IntegerType))

    ContractTypeDict
      .withColumnRenamed( "NAME_CONTRACT_TYPE", "value")
      .withColumnRenamed( "NAME_CONTRACT_TYPE_ID", "key")
      .write.mode("Overwrite").saveAsTable("dl_dict_contract_type")
    GenderDict
      .withColumnRenamed( "CODE_GENDER", "value")
      .withColumnRenamed( "CODE_GENDER_ID", "key")
      .write.mode("Overwrite").saveAsTable("dl_dict_gender")
    AccompliceDict
      .withColumnRenamed( "NAME_TYPE_SUITE", "value")
      .withColumnRenamed( "NAME_TYPE_SUITE_ID", "key")
      .write.mode("Overwrite").saveAsTable("dl_dict_accomplice")
    IncomeTypeDict
      .withColumnRenamed( "NAME_INCOME_TYPE", "value")
      .withColumnRenamed( "NAME_INCOME_TYPE_ID", "key")
      .write.mode("Overwrite").saveAsTable("dl_dict_income_type")
    EducationTypeDict
      .withColumnRenamed( "NAME_EDUCATION_TYPE", "value")
      .withColumnRenamed( "NAME_EDUCATION_TYPE_ID", "key")
      .write.mode("Overwrite").saveAsTable("dl_dict_education_type")
    FamilyStatusDict
      .withColumnRenamed( "NAME_FAMILY_STATUS", "value")
      .withColumnRenamed( "NAME_FAMILY_STATUS_ID", "key")
      .write.mode("Overwrite").saveAsTable("dl_dict_family_status")
    HousingTypeDict
      .withColumnRenamed( "NAME_HOUSING_TYPE", "value")
      .withColumnRenamed( "NAME_HOUSING_TYPE_ID", "key")
      .write.mode("Overwrite").saveAsTable("dl_dict_housing_type")
    OccupationTypeDict
      .withColumnRenamed( "OCCUPATION_TYPE", "value")
      .withColumnRenamed( "OCCUPATION_TYPE_ID", "key")
      .write.mode("Overwrite").saveAsTable("dl_dict_occupation_type")
    DayOfWeekAppliedDict
      .withColumnRenamed( "WEEKDAY_APPR_PROCESS_START", "value")
      .withColumnRenamed( "WEEKDAY_APPR_PROCESS_START_ID", "key")
      .write.mode("Overwrite").saveAsTable("dl_dict_day_of_week_applied")

    DataRes.write.mode("Overwrite").saveAsTable("dl_mart_filtered")
  }
}


